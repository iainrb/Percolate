== Percolate

=== Overview

Percolate is a lightweight library for coordinated execution of
external, command-line programs. It provides a means of defining data
transformation pipelines as simple scripts and a driver to execute
those scripts.

To run a pipeline script, a definition file containing its name and
arguments is placed in the Percolate 'in' directory. The driver runs
periodically (normally as a cron job), reads all available definition
files and attempts to run as many pipeline steps as possible from each
one. If a pipeline completes, the definition file is moved to a 'pass'
directory, or to a 'fail' directory if an error occurs.


=== Preparing command-line programs

Each command-line program should be wrapped in a single function whose
parameters represent the program's input and whose return value
represents the program's output. Calling the function with some
arguments will execute the program, either immediately or later, on a
batch queue.


=== Percolate functions

The following applies to all functions used in Percolate scripts,
including those used to wrap command-line programs.

 - Function arguments represent data and a non-empty argument is a
   guarantee that the data are present when the call is made. For
   example, when a file path is passed as an argument, that file must
   already be present on disk. Function return values also represent
   data and a non-empty value guarantees that the data have been
   written by the wrapped program.

   The meaning of "empty" depends on the programming language used and
   the conventions chosen by the user. For example, in Ruby it would
   be 'nil', but could also include an Array which contained one or
   more 'nil' values.

 - A wrapper function must be able to respond to two categories of
   execution; the first is when called with all required arguments
   being non-empty, at which point it must return a value, the second
   is when called with one or more of its required arguments being
   empty, when it must return an empty value itself.

 - Multiple calls to a function with the same arguments must always
   yield the same return value (i.e. the function must be idempotent).

 - It is safe to call a Percolate function many times without worrying
   that the underlying command-line program will be run more than
   once. You do not have to do anything special to achieve this, it is
   taken care of by the Percolate system. All function calls which
   yield a non-empty return value are memoized (cached). It is
   therefore safe (and encouraged) to call the same function again
   whenever you need access to its return value, rather than storing
   the that value in a variable, for example.

The Percolate library takes responsibility for most of the bookkeeping
involved in writing suitable functions, both for simple system
commands and those involving a batch queue.


=== Percolate data

Data are represented in Percolate scripts by function arguments and
return values. These may be data themselves e.g. identifier strings or
may be proxies for external data e.g. filenames or URIs.


=== Percolate scripts

A script is simply a Percolate function which calls other functions. A
driver calls each script repeatedly, with its required arguments,
until it returns a non-empty value or raises an error. If no error is
raised, the script is complete, otherwise it has failed. Failed
scripts may be restarted from their last successful function call,
after diagnosing and fixing the underlying problem.


=== Advanced use

Since scripts are themselves functions, they become modular, provided
they use a common way of representing their data. It is possible to
use higher-order functions where Percolate functions are passed as
arguments or new functions are returned.

For example, an analysis script function could be passed to a function
which, under specific circumstances, composes it with a
post-processing function to create a new script. In this way, more
abstract design intentions (in this example, selecting alternative
post-processing options at runtime) may be organised separately from
the implementation details (specific post-processing algorithms and
data formats).
