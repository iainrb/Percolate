== Percolate

=== Overview

Percolate is a lightweight library for coordinated execution of
external, command-line programs. It provides a means of defining data
transformation pipelines as simple scripts and a driver to execute
those scripts.

To run a pipeline script, a definition file containing its name and
arguments is placed in the Percolate 'in' directory. The driver runs
periodically (normally as a cron job), reads all available definition
files and attempts to run as many pipeline steps as possible from each
one. If a pipeline completes, the definition file is moved to a 'pass'
directory, or to a 'fail' directory if an error occurs.


=== Preparing command-line programs

Each command-line program should be wrapped in a single function whose
parameters represent the program's input and whose return value
represents the program's output. Calling the function with some
arguments will execute the program, either immediately or later, on a
batch queue.


=== Percolate functions

The following applies to all functions used in Percolate scripts,
including those used to wrap command-line programs.

 - Function arguments represent data and a non-empty argument is a
   guarantee that the data are present when the call is made. For
   example, when a file path is passed as an argument, that file must
   already be present on disk. Function return values also represent
   data and a non-empty value guarantees that the data have been
   written by the wrapped program.

   The meaning of "empty" depends on the programming language used and
   the conventions chosen by the user. For example, in Ruby it would
   be 'nil', but could also include an Array which contained one or
   more 'nil' values.

 - A wrapper function must be able to respond to two modes of
   execution; the first is when called with all required arguments
   being non-empty, at which point it must return a value, the second
   is when called with one or more of its required arguments being
   empty, when it must return an empty value.

 - Multiple calls to a function with the same arguments must always
   yield the same return value (i.e. the function must be idempotent).

 - It is safe to call a Percolate function many times without worrying
   that the underlying command-line program will be run more than
   once. You do not have to do anything special to achieve this, it is
   taken care of by the Percolate system. All function calls which
   yield a non-empty return value are memoized (cached). It is
   therefore safe (and encouraged) to call the same function again
   whenever you need access to its return value, rather than storing
   the that value in a variable, for example.

The Percolate library takes responsibility for most of the bookkeeping
involved in writing suitable functions, both for simple system
commands and those involving a batch queue.


=== Percolate data

Data are represented in Percolate scripts by function arguments and
return values. These may be data themselves e.g. identifier strings or
may be proxies for external data e.g. filenames or URIs.


=== Percolate workflows

A Workflow is a Ruby object with a 'run' method which calls one or
more Percolate functions. A driver script calls each Workflow.run
method repeatedly, with its required arguments, until it returns a
non-empty value or raises an error. If no error is raised, the
Workflow is complete, otherwise it has failed. Failed scripts may be
restarted from their last successful function call, after diagnosing
and fixing the underlying problem.


=== The Percolate configuration file

This file controls core settings, such as the Percolate root directory
location, log file name and logging verbosity. The file is in YAML
format. The default configuration file is located at $HOME/.percolate

The log file contains a YAML map:

root_dir: <path to Percolate root, defaults to ~/percolate>
log_file: <log file name, defaults to percolate.log>
log_level: <log verbosity, one of TRACE|DEBUG|INFO|WARN, defaults to WARN>


The root directory contains the follow subdirectories:

in/    A directory where new workflow definition files are placed
pass/  A directory to which completed workflow definition files are moved
fail/  A directory to which failed workflow definition files are moved

locks/ A directory where temporary lock files are created during a workflow
       lifecycle

If the root directory or any of the subdirectories are absent,
Percolate will create them automatically.


=== Percolate batch jobs

Percolate runs batch jobs inside a wrapper which sends messages
describing job progress to a central message queue. The Percolate
driver takes messages from the queue each time it runs and uses the
information to decide which new functions may be run or submitted to
batch queues.

If one or more batch jobs fail, the driver moves the workflow
definition file to the 'fail' directory. Any batch jobs from a failed
workflow that are left running will still send messages to the message
queue; the driver will simply ignore them for the time being. The
failed batch jobs may be re-submitted or re-queued and the workflow
definiton file moved back to the 'in' directory, at which point the
driver will again start to process messages for that workflow.
