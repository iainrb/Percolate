#!/usr/bin/env ruby
#
# Copyright (C) 2010 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'rubygems'
require 'optparse'

require 'percolate'

include Percolate
include Percolate::CommandFileIO

class WrapClientArguments < Hash
  def initialize args
    super

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #$0 [options]"
      t = [:task_id, '-t', '--task TASK_ID', 'Percolate task identity']
      q = [:queue, '-q', '--queue QUEUE', 'Percolate queue name']
      h = [:host, '-h', '--host HOSTNAME', 'Percolate queue host']
      [t, q, h].each do |key, short, long, doc|
        opts.on(short, long, doc) { |opt| self[key] = opt }
      end

      opts.on('-p', '--port PORT', 'Percolate queue port') { |port|
        begin
          self[:port] = Integer(port)
        rescue ArgumentError => ae
          raise OptionParser::ParseError, ae.to_s
        end
      }

      opts.on('-i', '--index', 'Percolate indexed task') {
        self[:index] = true
      }

      opts.on('-?', '--help', 'Display this help and exit') {
        $stderr.puts(opts)
        exit
      }
    end

    begin
      opts.parse!(args)

      [:task_id, :queue, :host, :port].each { |arg|
        if !self.has_key?(arg)
          raise ArgumentError, "a --#{arg} argument must be provided"
        end
      }
    rescue OptionParser::ParseError => pe
      $stderr.puts(opts)
      $stderr.puts("\nInvalid argument: #{pe}")
      exit(CLI_ERROR)
    rescue Exception => e
      $stderr.puts(opts)
      $stderr.puts("\nCommand line error: #{e.message}")
      exit(CLI_ERROR)
    end

    self
  end
end

args = WrapClientArguments.new(ARGV)

task_id = nil
command = nil
exitstatus = nil

if args.has_key?(:index)
  file = args[:task_id] + '.txt'
  job_index = ENV['LSB_JOBINDEX']
  unless job_index
    raise PercolateError, "LSB_JOBINDEX was not set"
  end

  task_id, command = read_array_command(file, Integer(job_index))
else
  task_id = args[:task_id]
  command = ARGV.join(' ')
end

host, port, queue = args[:host], args[:port], args[:queue]
client = MessageClient.new(queue, host, port)

exitstatus = WRAPPER_ERROR

begin
  client.open_queue
  client.send_message(TaskMessage.new(task_id, command, :started))

  system(command)
  exitstatus = if $?.exited?
                 $?.exitstatus
               elsif $?.signaled?
                 128 + $?.termsig
               end

  client.send_message(TaskMessage.new(task_id, command, :finished, exitstatus))
ensure
  client.close_queue
end

exit(exitstatus)
